require('babel/register')();

/**
 * Module dependencies.
 */

const app = require('../server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

if(!process.env.PORT){ throw Error('PORT variable must exist to continue.')}
const port = normalizePort(process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.log(bind + ' requires elevated privileges');
            break;
        case 'EADDRINUSE':
            console.log(bind + ' is already in use');
            break;
        default:
            throw error;
            process.exit(1);
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'PIPE ' + addr : 'PORT ' + addr.port;
    console.log('----STARTING----');
    console.log('Listening on ' + bind);
    console.log('NODE_ENV: "' + process.env.NODE_ENV + '"');
    console.log('---------------');
}

// process.on('SIGINT', ()=>{
    //clean up and release pool connections and etc...
// });
